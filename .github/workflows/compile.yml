name: "Auto compile with OpenWrt SDK"

on:
  workflow_dispatch:
    inputs:
      ssh:
        description: "SSH connection to Actions"
        required: false
        default: "false"
  push:
    branches:
      - "master"
    paths:
      - "Makefile"

env:
  TZ: Asia/Shanghai

jobs:
  version_check:
    name: Check Version
    runs-on: ubuntu-latest
    outputs:
      argon_version: ${{ steps.check.outputs.latest_version }}
      has_update: ${{ steps.check.outputs.has_update }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check version
        id: check
        run: |
          VERSION=$(grep 'PKG_VERSION:' Makefile | cut -d':' -f2 | tr -d ' ')
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          
          if [ "$VERSION" != "${LATEST_RELEASE#v}" ]; then
            echo "has_update=true" >> $GITHUB_OUTPUT
            echo "latest_version=v$VERSION" >> $GITHUB_OUTPUT
          else
            echo "has_update=false" >> $GITHUB_OUTPUT
            echo "latest_version=v$VERSION" >> $GITHUB_OUTPUT
          fi
          
          echo "Version: $VERSION"
          echo "Latest Release: $LATEST_RELEASE"
          echo "Has Update: ${{ steps.check.outputs.has_update }}"

      - name: Create Release
        if: steps.check.outputs.has_update == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.check.outputs.latest_version }}
          name: "Argon Theme ${{ steps.check.outputs.latest_version }}"
          draft: false
          prerelease: false

  build_theme:
    name: Build Argon Theme
    runs-on: ubuntu-latest
    needs: version_check
    if: needs.version_check.outputs.has_update == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            clang \
            flex \
            bison \
            g++ \
            gawk \
            gcc-multilib \
            g++-multilib \
            gettext \
            git \
            libncurses5-dev \
            libssl-dev \
            python3 \
            python3-venv \
            rsync \
            unzip \
            zlib1g-dev \
            file \
            wget \
            xz-utils

      - name: Download OpenWrt SDK
        id: sdk
        run: |
          SDK_URL="https://downloads.openwrt.org/releases/24.10.3/targets/ramips/mt7620/openwrt-sdk-24.10.3-ramips-mt7620_gcc-13.3.0_musl.Linux-x86_64.tar.xz"
          wget -O sdk.tar.xz "$SDK_URL"
          mkdir sdk
          tar -xJf sdk.tar.xz -C sdk --strip-components=1
          echo "sdk_path=$PWD/sdk" >> $GITHUB_OUTPUT

      - name: Setup SDK environment
        run: |
          cd ${{ steps.sdk.outputs.sdk_path }}
          
          # Configure feeds
          cat > feeds.conf << 'EOF'
src-git base https://github.com/openwrt/openwrt.git;v24.10.3
src-git packages https://github.com/openwrt/packages.git;v24.10.3
src-git luci https://github.com/openwrt/luci.git;v24.10.3
src-git routing https://git.openwrt.org/feed/routing.git;v24.10.3
EOF
          
          # Update and install feeds
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
          # Copy theme package to SDK
          mkdir -p package/luci-theme-argon
          cp -r $GITHUB_WORKSPACE/* package/luci-theme-argon/

      - name: Configure build
        run: |
          cd ${{ steps.sdk.outputs.sdk_path }}
          
          # Create minimal config
          cat > .config << 'EOF'
CONFIG_TARGET_ramips=y
CONFIG_TARGET_ramips_mt7620=y
CONFIG_PACKAGE_luci-theme-argon=m
CONFIG_LUCI_LANG_zh_Hans=y
EOF
          
          make defconfig

      - name: Compile theme
        id: compile
        run: |
          cd ${{ steps.sdk.outputs.sdk_path }}
          
          # Clean and compile with verbose output
          make package/luci-theme-argon/clean V=sc
          make package/luci-theme-argon/compile V=sc -j$(nproc)
          
          # Find and copy IPK files
          mkdir -p $GITHUB_WORKSPACE/output
          find bin -name "*.ipk" -exec cp {} $GITHUB_WORKSPACE/output/ \;
          
          # Check if compilation was successful
          if ls $GITHUB_WORKSPACE/output/luci-theme-argon*.ipk 1> /dev/null 2>&1; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failed" >> $GITHUB_OUTPUT
          fi

      - name: List build artifacts
        if: steps.compile.outputs.status == 'success'
        run: |
          echo "=== Built packages ==="
          ls -la $GITHUB_WORKSPACE/output/
          echo "=== File details ==="
          file $GITHUB_WORKSPACE/output/*

      - name: Upload to Release
        if: steps.compile.outputs.status == 'success'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.version_check.outputs.latest_version }}
          files: $GITHUB_WORKSPACE/output/*.ipk

      - name: Upload build logs on failure
        if: steps.compile.outputs.status == 'failed'
        uses: actions/upload-artifact@v4
        with:
          name: build-failure-logs
          path: ${{ steps.sdk.outputs.sdk_path }}/logs/
          retention-days: 7
