#
# Copyright (c) 2022-2023 SMALLPROGRAM <https://github.com/smallprogram>
# Description: Auto compile
#

#
# Fork and compile the latest version yourself using Github Actions
#   1.Into the repository of your own fork
#   2.Into the repository [Settings]
#   3.[Code and automation - Actions] ↓ [General] → [Workflow permissions] ↓  Check the [Read and write permissions] and [Save]
#   4.Let's take [Actions]
#

name: "Auto compile with OpenWrt SDK"
on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: "SSH connection to Actions"
        required: false
        default: "false"
  push:
    branches:
      - "master"
    paths:
      - "luci-theme-argon/Makefile"
env:
  TZ: Asia/Shanghai

jobs:
  job_check:
    if: github.repository == ${{ github.repository }}
    name: Check Version
    runs-on: ubuntu-latest
    outputs:
      argon_version: ${{ steps.check_version.outputs.latest_version }}
      has_update: ${{ steps.check_version.outputs.has_update }}
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 0
          ref: "master"

      - name: Check version
        id: check_version
        env:
          url_release: https://api.github.com/repos/${{ github.repository }}/releases/latest
        run: |
          latest_version=$(grep -oP 'PKG_VERSION:=\K.*' Makefile | sed 's/^/v/')
          latest_release=$(wget -qO- -t1 -T2 ${{env.url_release}} | awk -F '"' '/tag_name/{print $4}')
          has_update=$([ "${latest_version}" != "${latest_release}" ] && echo true || echo false)
          echo "latest_version=${latest_version}" >> $GITHUB_OUTPUT
          echo "has_update=${has_update}" >> $GITHUB_OUTPUT
          echo "latest_version: ${latest_version}"
          echo "latest_release: ${latest_release}"
          echo "has_update: ${has_update}"

      - name: Generate new tag & release
        if: steps.check_version.outputs.has_update == 'true'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: For openwrt official Snapshots LuCI master
          tag_name: ${{steps.check_version.outputs.latest_version}}

  job_build_argon:
    name: Build Argon (master)
    needs: job_check
    if: needs.job_check.outputs.has_update == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Install packages
        run: |
          echo "Install packages"
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install zstd build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3-venv rsync unzip zlib1g-dev file wget
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

      - name: Cache openwrt SDK
        id: cache-sdk
        uses: actions/cache@v3
        with:
          path: sdk
          # 修改缓存键为 ramips/mt7620 架构
          key: openwrt-sdk-24.10.3-ramips-mt7620

      - name: Initialization environment
        if: steps.cache-sdk.outputs.cache-hit != 'true'
        env:
          # 修改为正确的 SDK 下载链接
          url_sdk: https://downloads.openwrt.org/releases/24.10.3/targets/ramips/mt7620/openwrt-sdk-24.10.3-ramips-mt7620_gcc-13.3.0_musl.Linux-x86_64.tar.zst
        run: |
          wget ${{ env.url_sdk }}
          file_name=$(echo ${{env.url_sdk}} | awk -F/ '{print $NF}')
          mkdir sdk && tar --zstd -xvf $file_name -C ./sdk --strip-components=1
          cd sdk  
          # 修改 feeds 为对应版本
          echo "src-git base https://github.com/openwrt/openwrt.git;v24.10.3" > feeds.conf
          echo "src-git-full packages https://github.com/openwrt/packages.git;v24.10.3" >> feeds.conf
          echo "src-git-full luci https://github.com/openwrt/luci.git;v24.10.3" >> feeds.conf
          echo "src-git-full routing https://git.openwrt.org/feed/routing.git;v24.10.3"  >> feeds.conf
          git clone -b master https://github.com/${{ github.repository }}.git package/luci-theme-argon
          ./scripts/feeds update -a
          # 安装所有必要的包，而不仅仅是 argon
          ./scripts/feeds install -a
          echo "CONFIG_PACKAGE_luci-theme-argon=m" > .config
          make defconfig
          make download -j8

      - name: Configure Argon (master)
        run: |
          cd sdk
          # 确保安装依赖
          ./scripts/feeds install luci-theme-argon
          ./scripts/feeds install luci-lib-base
          ./scripts/feeds install luci-compat
          # 简化配置
          cat > .config << 'EOF'
CONFIG_TARGET_ramips=y
CONFIG_TARGET_ramips_mt7620=y
CONFIG_PACKAGE_luci-theme-argon=m
CONFIG_PACKAGE_luci-lib-base=y
CONFIG_PACKAGE_luci-compat=y
CONFIG_LUCI_LANG_zh_Hans=y
EOF
          make defconfig

      - name: Compile Argon (master)
        id: compile
        run: |
          cd sdk
          echo "开始编译..."
          make package/luci-theme-argon/{clean,compile} -j$(nproc)
          
          echo "=== 查找编译产物 ==="
          # 创建输出目录
          mkdir -p ../output
          
          # ramips/mt7620 架构对应的路径是 mipsel_24kc
          if [ -d "bin/packages/mipsel_24kc/base" ]; then
            echo "找到 mipsel_24kc 架构的包"
            cp bin/packages/mipsel_24kc/base/luci-theme-argon* ../output/ 2>/dev/null || echo "复制 argon 包失败"
            # 同时复制可能的依赖包
            cp bin/packages/mipsel_24kc/base/luci-lib-base* ../output/ 2>/dev/null || echo "复制依赖包失败"
            cp bin/packages/mipsel_24kc/base/luci-compat* ../output/ 2>/dev/null || echo "复制依赖包失败"
          else
            echo "=== 尝试其他路径 ==="
            # 如果标准路径不存在，搜索所有可能的路径
            find bin -name "luci-theme-argon*.ipk" -exec cp {} ../output/ \; 2>/dev/null || true
          fi
          
          echo "=== 输出目录内容 ==="
          ls -la ../output/ 2>/dev/null || echo "输出目录为空"
          
          # 检查是否成功生成了ipk文件
          if ls ../output/luci-theme-argon*.ipk 1> /dev/null 2>&1; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "FIRMWARE=$PWD/../output" >> $GITHUB_ENV
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "错误：未找到编译产物"
            find . -name "*.ipk" -type f | head -10
          fi

      - name: Debug - Check build results
        if: always()
        run: |
          echo "=== 最终检查 ==="
          find sdk/bin -name "*.ipk" -type f 2>/dev/null | head -10 || echo "未找到ipk文件"
          echo "=== 目录结构 ==="
          find sdk/bin/packages -type d 2>/dev/null | head -10

      - name: Upload Argon ipks to release
        if: steps.compile.outputs.status == 'success'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{needs.job_check.outputs.argon_version}}
          files: ${{ env.FIRMWARE }}/*.ipk

      - name: Upload build logs on failure
        if: steps.compile.outputs.status == 'failed'
        uses: actions/upload-artifact@v3
        with:
          name: build-logs
          path: |
            sdk/build.log
            sdk/tmp/
          retention-days: 1
